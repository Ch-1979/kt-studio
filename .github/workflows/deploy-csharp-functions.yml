name: Deploy C# Blob Trigger Function (AAD OIDC Deploy)

# REQUIRED REPO SECRETS (OIDC):
#   AZURE_CLIENT_ID        -> App Registration (Application / Client ID)
#   AZURE_TENANT_ID        -> Directory (Tenant) ID
#   AZURE_SUBSCRIPTION_ID  -> Azure Subscription ID
# The App Registration must have a Federated Credential configured for:
#   - Entity: GitHub Actions
#   - Repo:  ch-1979/kt-studio (adjust if forked)
#   - Branch: main (or * if you prefer)
#   - Audience: api://AzureADTokenExchange
# And the Service Principal (same App Registration) must have RBAC role (e.g. Contributor) on the target Function App / RG.

concurrency:
  group: csharp-func-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      function_app_name:
        description: "Azure Function App name"
        required: true
        default: "AIHACK-FUNCTIONAPP-GRP03-DOTNET"
      resource_group:
        description: "Resource group"
        required: true
        default: "AIHACK-RG-GRP03"
  push:
    branches: [ main ]
    paths:
      - 'csharp-functions/**'
      - '.github/workflows/deploy-csharp-functions.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy (.NET Blob Trigger)
    env:
      DEFAULT_FUNCTION_APP: AIHACK-FUNCTIONAPP-GRP03-DOTNET
      DEFAULT_RESOURCE_GROUP: AIHACK-RG-GRP03
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required OIDC secrets
        run: |
          MISSING=0
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then echo "::error title=Missing Secret::AZURE_CLIENT_ID not set"; MISSING=1; fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then echo "::error title=Missing Secret::AZURE_TENANT_ID not set"; MISSING=1; fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then echo "::error title=Missing Secret::AZURE_SUBSCRIPTION_ID not set"; MISSING=1; fi
          if [ $MISSING -eq 1 ]; then
            echo "One or more required secrets are missing. Configure them in the repository Settings > Secrets and re-run."; exit 1; fi
          echo "All required OIDC secrets appear to be present."

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        working-directory: csharp-functions
        run: dotnet restore

      - name: Build
        working-directory: csharp-functions
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        working-directory: csharp-functions
        run: dotnet publish ProcessKTDocumentFunction.csproj -c Release

      - name: Diagnostics - List publish output
        working-directory: csharp-functions/bin/Release/net8.0/publish
        run: |
          echo "Listing publish directory contents:" 
          ls -R || dir
          echo "Check host.json:" 
          cat host.json || type host.json
          echo "Show functions metadata (new .NET 8 isolated consolidation):"
          if [ -f functions.metadata ]; then
            head -c 2000 functions.metadata || true
          else
            echo "functions.metadata not found (older SDK would emit function.json)"
          fi
          echo "Done diagnostics."

      - name: Validate build produced at least one function (functions.metadata aware)
        working-directory: csharp-functions/bin/Release/net8.0/publish
        run: |
          if [ -f functions.metadata ]; then
            if grep -q 'ProcessKTDocument' functions.metadata; then
              echo "Found ProcessKTDocument in functions.metadata"
              exit 0
            else
              echo "functions.metadata present but function name not found" >&2
              exit 1
            fi
          fi
          COUNT=$(find . -name function.json | wc -l || echo 0)
          echo "Legacy function.json count: $COUNT"
            if [ "$COUNT" -gt 0 ]; then
              echo "Legacy function.json files found (acceptable)"
              exit 0
            else
              echo "ERROR: Neither functions.metadata nor function.json present" >&2
              exit 1
            fi

        - name: Resolve deployment parameters
          id: params
          run: |
            FUNCTION_APP="${{ github.event.inputs.function_app_name }}"
            RESOURCE_GROUP="${{ github.event.inputs.resource_group }}"
            if [ -z "$FUNCTION_APP" ]; then
              FUNCTION_APP="$DEFAULT_FUNCTION_APP"
            fi
            if [ -z "$RESOURCE_GROUP" ]; then
              RESOURCE_GROUP="$DEFAULT_RESOURCE_GROUP"
            fi
            echo "Resolved function app: $FUNCTION_APP"
            echo "Resolved resource group: $RESOURCE_GROUP"
            echo "function_app=$FUNCTION_APP" >> "$GITHUB_OUTPUT"
            echo "resource_group=$RESOURCE_GROUP" >> "$GITHUB_OUTPUT"

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # If login fails, ensure federated credential matches repo/branch and App Registration has proper RBAC.

      - name: Create deployment ZIP
        working-directory: csharp-functions/bin/Release/net8.0/publish
        run: |
          echo "Creating deployment ZIP (root contents):"; ls -1
          zip -r ../../../../functionapp.zip . >/dev/null
          echo "ZIP size:"; ls -lh ../../../../functionapp.zip

      - name: Deploy via az functionapp deployment source config-zip
        run: |
          set -e
          echo "Starting zip deploy to ${{ steps.params.outputs.function_app }}"
          az functionapp deployment source config-zip \
            --name ${{ steps.params.outputs.function_app }} \
            --resource-group ${{ steps.params.outputs.resource_group }} \
            --src functionapp.zip \
            --only-show-errors || (echo "Zip deploy failed" && exit 1)
          echo "Zip deploy completed."

      - name: Post-deploy sanity (list site files)
        run: |
          echo "Listing root of wwwroot via Kudu API (sanitized)" || true
          # This uses az rest with the access token from azure/login
          TOKEN=$(az account get-access-token --resource https://management.azure.com --query accessToken -o tsv)
          echo "(Skipping raw Kudu listing due to auth complexity with AAD unless App has Easy Auth)."
          echo "Deployment attempted to Function App: ${{ steps.params.outputs.function_app }}"

      - name: Post-Deploy Reminder
        run: |
          echo "If not already set, configure OpenAI & Speech settings on the Function App." 
